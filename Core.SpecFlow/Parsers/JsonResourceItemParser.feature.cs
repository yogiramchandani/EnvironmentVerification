// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Core.SpecFlow.Parsers
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Json Resource Item Parser")]
    public partial class JsonResourceItemParserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "JsonResourceItemParser.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Json Resource Item Parser", "In order to process a Json string\r\nAs a service user \r\nI want to be provided a li" +
                    "st of all the parsed Resource item lists", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When a valid Json string is passed with 3 items, check count")]
        public virtual void WhenAValidJsonStringIsPassedWith3ItemsCheckCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When a valid Json string is passed with 3 items, check count", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a new JsonResourceItemProcessor");
#line 8
 testRunner.When("I add string for Json processing \"[{\"ItemType\":\"File\",\"Identifier\":\"File1\",\"Locat" +
                    "ion\":\"FileLocation1\"},{\"ItemType\":\"File\",\"Identifier\":\"File1\",\"Location\":\"FileLo" +
                    "cation1\"},{\"ItemType\":\"File\",\"Identifier\":\"File1\",\"Location\":\"FileLocation1\"}]\"");
#line 9
 testRunner.Then("the Json result type should be Success");
#line 10
 testRunner.Then("the Json result should have a count of 3");
#line 11
 testRunner.Then("the Json result for type File should have a count of 3");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When a valid Json string is passed with 1 File and 2 Directory, check count")]
        public virtual void WhenAValidJsonStringIsPassedWith1FileAnd2DirectoryCheckCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When a valid Json string is passed with 1 File and 2 Directory, check count", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have a new JsonResourceItemProcessor");
#line 15
 testRunner.When("I add string for Json processing \"[{\"ItemType\":\"File\",\"Identifier\":\"File1\",\"Locat" +
                    "ion\":\"FileLocation1\"},{\"ItemType\":\"Directory\",\"Identifier\":\"File1\",\"Location\":\"F" +
                    "ileLocation1\"},{\"ItemType\":\"Directory\",\"Identifier\":\"File1\",\"Location\":\"FileLoca" +
                    "tion1\"}]\"");
#line 16
 testRunner.Then("the Json result type should be Success");
#line 17
 testRunner.Then("the Json result should have a count of 3");
#line 18
 testRunner.Then("the Json result for type File should have a count of 1");
#line 19
 testRunner.Then("the Json result for type Directory should have a count of 2");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When a valid Json string is passed with 1 File and 2 Directory including a \\, che" +
            "ck count")]
        public virtual void WhenAValidJsonStringIsPassedWith1FileAnd2DirectoryIncludingACheckCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When a valid Json string is passed with 1 File and 2 Directory including a \\, che" +
                    "ck count", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I have a new JsonResourceItemProcessor");
#line 23
 testRunner.When(@"I add string for Json processing ""[{""ItemType"" : ""File"",""Identifier"" : ""Templates"",""Location"" : ""D:\AppShare\DataSuite\Templates\UtilFunctions.xslt""}, {	""ItemType"" : ""Directory"",	""Identifier"" : ""TemplateDirectory"",		""Location"" : ""D:\AppShare\DataSuite\Templates""	}, 	{		""ItemType"" : ""WindowsService"",		""Identifier"" : ""LevyWCF"",		""Location"" : ""PPF.Levy.WCFHost""	}, 	{		""ItemType"" : ""Test"",		""Identifier"" : ""TestInvalid"",		""Location"" : ""PPF.Levy.WCFHost""	}]""");
#line 24
 testRunner.Then("the Json result type should be Success");
#line 25
 testRunner.Then("the Json result should have a count of 4");
#line 26
 testRunner.Then("the Json result for type File should have a count of 1");
#line 27
 testRunner.Then("the Json result for type Directory should have a count of 1");
#line 28
 testRunner.Then("the Json result for type WindowsService should have a count of 1");
#line 29
 testRunner.Then("the Json result for type Test should have a count of 1");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When an invalid Json string is passed expect an error")]
        public virtual void WhenAnInvalidJsonStringIsPassedExpectAnError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When an invalid Json string is passed expect an error", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have a new JsonResourceItemProcessor");
#line 33
 testRunner.When("I add string for Json processing \"sdfsdfsdf sdfs dfsd fsd fsdf sdfsdf\"");
#line 34
 testRunner.Then("the Json result type should be Failure");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
