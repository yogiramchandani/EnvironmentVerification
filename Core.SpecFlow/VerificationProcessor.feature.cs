// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Core.SpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verification Processor")]
    public partial class VerificationProcessorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VerificationProcessor.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Verification Processor", "In order to process a batch of environment artifacts\r\nAs a service user \r\nI want " +
                    "to be told the status of all the artifacts", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When 3 items are passed, check for count")]
        public virtual void When3ItemsArePassedCheckForCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When 3 items are passed, check for count", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a new EnvironmentVerificationProcessor");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "name",
                        "location"});
            table1.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table1.AddRow(new string[] {
                        "Directory",
                        "TemplateDirectory",
                        "D:\\AppShare\\DataSuite\\Templates"});
            table1.AddRow(new string[] {
                        "Invalid",
                        "InvalidName",
                        "Test"});
#line 8
 testRunner.When("I add items for processing", ((string)(null)), table1);
#line 13
 testRunner.Then("the Environment Verification Processor result count should be 3");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When 2 Valid and 1 invalid items are passed, check return value")]
        public virtual void When2ValidAnd1InvalidItemsArePassedCheckReturnValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When 2 Valid and 1 invalid items are passed, check return value", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have a new EnvironmentVerificationProcessor");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "name",
                        "location"});
            table2.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table2.AddRow(new string[] {
                        "Directory",
                        "TemplateDirectory",
                        "D:\\AppShare\\DataSuite\\Templates"});
            table2.AddRow(new string[] {
                        "Invalid",
                        "InvalidName",
                        "Test"});
#line 17
 testRunner.When("I add items for processing", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Message"});
            table3.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
            table3.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, path: D:\\AppShare\\DataSuite\\Templates"});
            table3.AddRow(new string[] {
                        "Failure",
                        "Failed, Could not find a valid verifier for name: InvalidName, location: Test"});
#line 22
 testRunner.Then("the Environment Verification Processor result should be", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When 4 Valid Duplicates are passed, check return value")]
        public virtual void When4ValidDuplicatesArePassedCheckReturnValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When 4 Valid Duplicates are passed, check return value", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have a new EnvironmentVerificationProcessor");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "name",
                        "location"});
            table4.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table4.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table4.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table4.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
#line 30
 testRunner.When("I add items for processing", ((string)(null)), table4);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Message"});
            table5.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
            table5.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
            table5.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
            table5.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
#line 36
 testRunner.Then("the Environment Verification Processor result should be", ((string)(null)), table5);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When 2 Valid Duplicates are passed for all types, check return value")]
        public virtual void When2ValidDuplicatesArePassedForAllTypesCheckReturnValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When 2 Valid Duplicates are passed for all types, check return value", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I have a new EnvironmentVerificationProcessor");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "type",
                        "name",
                        "location"});
            table6.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table6.AddRow(new string[] {
                        "File",
                        "Template",
                        "D:\\AppShare\\DataSuite\\Templates\\UtilFunctions.xslt"});
            table6.AddRow(new string[] {
                        "Directory",
                        "TemplateDirectory",
                        "D:\\AppShare\\DataSuite\\Templates"});
            table6.AddRow(new string[] {
                        "Directory",
                        "TemplateDirectory",
                        "D:\\AppShare\\DataSuite\\Templates"});
            table6.AddRow(new string[] {
                        "Database",
                        "Nirvana",
                        "Data Source=.\\CDR;Initial Catalog=nirvana_small;Integrated Security=SSPI"});
            table6.AddRow(new string[] {
                        "Database",
                        "Marshal",
                        "Data Source=.\\CDR;Initial Catalog=marshal;Integrated Security=SSPI"});
            table6.AddRow(new string[] {
                        "WindowsService",
                        "WinService1",
                        "PPF.Levy.WCFHost"});
            table6.AddRow(new string[] {
                        "WindowsService",
                        "WinService2",
                        "PPF.Levy.WCFHost"});
            table6.AddRow(new string[] {
                        "Invalid",
                        "Invalid1",
                        "InvalidLocation1"});
            table6.AddRow(new string[] {
                        "Invalid",
                        "Invalid2",
                        "InvalidLocation2"});
#line 45
 testRunner.When("I add items for processing", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Message"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, file path: D:\\AppShare\\DataSuite\\Templates\\UtilFu" +
                            "nctions.xslt"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, path: D:\\AppShare\\DataSuite\\Templates"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Templates, path: D:\\AppShare\\DataSuite\\Templates"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Nirvana, connection string : Data Source=.\\CDR;Initial Catal" +
                            "og=nirvana_small;Integrated Security=SSPI"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to Marshal, connection string : Data Source=.\\CDR;Initial Catal" +
                            "og=marshal;Integrated Security=SSPI"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to WinService1, connection string : PPF.Levy.WCFHost"});
            table7.AddRow(new string[] {
                        "Success",
                        "Passed connecting to WinService2, connection string : PPF.Levy.WCFHost"});
            table7.AddRow(new string[] {
                        "Failure",
                        "Failed, Could not find a valid verifier for name: Invalid1, location: InvalidLoca" +
                            "tion1"});
            table7.AddRow(new string[] {
                        "Failure",
                        "Failed, Could not find a valid verifier for name: Invalid2, location: InvalidLoca" +
                            "tion2"});
#line 57
 testRunner.Then("the Environment Verification Processor result should be", ((string)(null)), table7);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
