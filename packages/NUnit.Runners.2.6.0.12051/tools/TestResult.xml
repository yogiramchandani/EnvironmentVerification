<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\RamchandaniY\Git\EnvironmentVerification\Core.SpecFlow\bin\Debug\Core.SpecFlow.dll" total="32" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2012-07-19" time="14:40:57">
  <environment nunit-version="2.6.0.12051" clr-version="2.0.50727.5456" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="D:\RamchandaniY\Git\EnvironmentVerification\packages\NUnit.Runners.2.6.0.12051\tools" machine-name="PPF-DELL-200" user="RamchandaniY" user-domain="PPF-IT" />
  <culture-info current-culture="en-GB" current-uiculture="en-US" />
  <test-suite type="Assembly" name="D:\RamchandaniY\Git\EnvironmentVerification\Core.SpecFlow\bin\Debug\Core.SpecFlow.dll" executed="True" result="Success" success="True" time="1.484" asserts="0">
    <results>
      <test-suite type="Namespace" name="Core" executed="True" result="Success" success="True" time="1.468" asserts="0">
        <results>
          <test-suite type="Namespace" name="SpecFlow" executed="True" result="Success" success="True" time="1.468" asserts="0">
            <results>
              <test-suite type="TestFixture" name="DatabaseVerficationFeature" description="Database Verfication" executed="True" result="Success" success="True" time="1.223" asserts="0">
                <results>
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature._3DatabaseConnectionsAddedCheckTheResultCount" description="3 Database connections added check the result count" executed="True" result="Success" success="True" time="0.608" asserts="1" />
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature.ForAnExistingDatabaseCheckIfCanConnect" description="For an existing database check if can connect" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature.ForAnExistingDatabaseCheckTheResultCount" description="For an existing database check the result count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature.ForAnExistingDatabaseCheckTheResultString" description="For an existing database check the result string" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature.ForANonExistentDatabaseCheckIfCanConnect" description="For a non existent database check if can connect" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature.ForANonExistentDatabaseCheckTheResultCount" description="For a non existent database check the result count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.DatabaseVerficationFeature.ForANonExistentDatabaseCheckTheResultString" description="For a non existent database check the result string" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DirectoryVerficationFeature" description="Directory Verfication" executed="True" result="Success" success="True" time="0.066" asserts="0">
                <results>
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature._3DirectoryAreAddedCheckTheResultCount" description="3 directory are added, check the result count" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature.ForAnExistingDirectoryCheckTheResultCount" description="For an existing directory, check the result count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature.ForAnExistingDirectoryCheckTheResultMessage" description="For an existing directory, check the result message" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature.ForAnExistingDirectoryCheckTheResultStatus" description="For an existing directory, check the result status" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature.ForANonExistentDirectoryCheckTheResultCount" description="For a non existent directory, check the result count" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature.ForANonExistentDirectoryCheckTheResultMessage" description="For a non existent directory, check the result message" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.DirectoryVerficationFeature.ForANonExistentDirectoryCheckTheResultStatus" description="For a non existent directory, check the result status" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="EnvironmentVerificationProcessorFeature" description="Environment Verification Processor" executed="True" result="Success" success="True" time="0.063" asserts="0">
                <results>
                  <test-case name="Core.SpecFlow.EnvironmentVerificationProcessorFeature.When2ValidAnd1InvalidItemsArePassedCheckReturnValue" description="When 2 Valid and 1 invalid items are passed, check return value" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                  <test-case name="Core.SpecFlow.EnvironmentVerificationProcessorFeature.When2ValidDuplicatesArePassedForAllTypesCheckReturnValue" description="When 2 Valid Duplicates are passed for all types, check return value" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                  <test-case name="Core.SpecFlow.EnvironmentVerificationProcessorFeature.When3ItemsArePassedCheckForCount" description="When 3 items are passed, check for count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.EnvironmentVerificationProcessorFeature.When4ValidDuplicatesArePassedCheckReturnValue" description="When 4 Valid Duplicates are passed, check return value" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FileVerficationFeature" description="File Verfication" executed="True" result="Success" success="True" time="0.050" asserts="0">
                <results>
                  <test-case name="Core.SpecFlow.FileVerficationFeature._3FileAreAddedCheckTheResultCount" description="3 File are added, check the result count" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                  <test-case name="Core.SpecFlow.FileVerficationFeature.ForAnExistingFileCheckTheResultCount" description="For an existing File, check the result count" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="Core.SpecFlow.FileVerficationFeature.ForAnExistingFileCheckTheResultMessage" description="For an existing File, check the result message" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.FileVerficationFeature.ForAnExistingFileCheckTheResultStatus" description="For an existing File, check the result status" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.FileVerficationFeature.ForANonExistentFileCheckTheResultCount" description="For a non existent File, check the result count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.FileVerficationFeature.ForANonExistentFileCheckTheResultMessage" description="For a non existent File, check the result message" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.FileVerficationFeature.ForANonExistentFileCheckTheResultStatus" description="For a non existent File, check the result status" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ServiceVerficationFeature" description="Service Verfication" executed="True" result="Success" success="True" time="0.044" asserts="0">
                <results>
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature._3ServicesAreAddedCheckTheResultCount" description="3 services are added, check the result count" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature.ForAnExistingServiceCheckTheResultCount" description="For an existing service, check the result count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature.ForAnExistingServiceCheckTheResultMessage" description="For an existing service, check the result message" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature.ForAnExistingServiceCheckTheResultStatus" description="For an existing service, check the result status" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature.ForANonExistentServiceCheckTheResultCount" description="For a non existent service, check the result count" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature.ForANonExistentServiceCheckTheResultMessage" description="For a non existent service, check the result message" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="Core.SpecFlow.ServiceVerficationFeature.ForANonExistentServiceCheckTheResultStatus" description="For a non existent service, check the result status" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>